generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("MONGO_URI")
}

model User {
  id                     String    @id @default(auto()) @map("_id") @db.ObjectId
  firebaseUid            String    @unique
  email                  String    @unique
  gender                 String?
  age                    Int?
  height                 Float?
  currentWeight          Float?
  bmiStatus              String?
  goal                   String?
  bodyType               String?
  targetWeight           Float?
  dreamBodyShape         String?
  focusOn                String[] // List of strings
  workoutExperiance      String?
  fitness                String?
  self_assessed_activity String?
  knee                   Boolean?
  squat_reps             String?
  pushups_reps           String?
  crunches_reps          String?
  plank_reps             String?
  walk_daily             String?
  badHabit               String[] // List of strings
  lifeStyle              String?
  idealWeight            String?
  sleepTime              String?
  GetupTime              String?
  wakeupTime             String?
  feelStressed           String?
  motivate               String[] // List of strings
  workOutPlace           String[] // List of strings
  excludeloud            String?
  eventcomingup          String?
  eventTime              String?
  commitTime             String?
  LengthWorkout          Int?
  profileName            String?
  planPace               String?
  trainingDays           String[] // List of strings
  remainders             Boolean?
  hearAbout              String?
  subscriptionStatus     String    @default("FREE") // Values can be "FREE" or "PREMIUM"
  subscriptionExpiry     DateTime? // To know when the subscription ends
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
}

model Exercise {
  id                   String                 @id @default(auto()) @map("_id") @db.ObjectId
  exerciseName         String                 @unique
  description          String?
  category             String[]
  Hints                String?
  Breathing            String?
  videoUrl             String?
  thumbnailUrl         String?
  imageUrl             String?
  caloriesBurnedPerRep Int?
  isPremium            Boolean                @default(false)
  dailyWorkouts        DailyWorkoutExercise[]
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
}

model DailyWorkout {
  id            String                 @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String
  estimatedTime Int
  TotalCalories Int?
  exercises     DailyWorkoutExercise[]
  // week          WeeklyScheduleDay[]
}

model DailyWorkoutExercise {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  dailyWorkoutId  String       @db.ObjectId
  dailyWorkout    DailyWorkout @relation(fields: [dailyWorkoutId], references: [id])
  exerciseId      String       @db.ObjectId
  exercise        Exercise     @relation(fields: [exerciseId], references: [id])
  sets            Int?
  reps            String?
  durationSeconds Int?
  order           Int
}
